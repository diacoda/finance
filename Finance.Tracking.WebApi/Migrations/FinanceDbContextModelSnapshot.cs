// <auto-generated />
using System;
using Finance.Tracking.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Finance.Tracking.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    partial class FinanceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Finance.Tracking.Models.Account", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountFilter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bank")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cash")
                        .HasColumnType("REAL");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MarketValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Finance.Tracking.Models.AccountSummary", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountFilter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bank")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cash")
                        .HasColumnType("REAL");

                    b.Property<int>("Currency")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MarketValue")
                        .HasColumnType("REAL");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name", "Date");

                    b.HasIndex("Owner", "Type", "Bank", "Currency", "Date");

                    b.ToTable("AccountSummaries", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Finance.Tracking.Models.Holding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<int>("Symbol")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountName", "Symbol")
                        .IsUnique();

                    b.ToTable("Holdings");
                });

            modelBuilder.Entity("Finance.Tracking.Models.Price", b =>
                {
                    b.Property<int>("Symbol")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Symbol", "Date");

                    b.ToTable("Prices", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("TotalMarketValue", b =>
                {
                    b.Property<DateOnly>("AsOf")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "asOf");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<double>("MarketValue")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "marketValue");

                    b.HasKey("AsOf", "Type");

                    b.ToTable("TotalMarketValues");
                });

            modelBuilder.Entity("Finance.Tracking.Models.Holding", b =>
                {
                    b.HasOne("Finance.Tracking.Models.Account", "Account")
                        .WithMany("Holdings")
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Finance.Tracking.Models.Account", b =>
                {
                    b.Navigation("Holdings");
                });
#pragma warning restore 612, 618
        }
    }
}
